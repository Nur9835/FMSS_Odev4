import App from "../App"
import { render, screen } from "@testing-library/react"
import emojiList from "../emojiList.json"
import userEvent from "@testing-library/user-event"
import '@testing-library/jest-dom'


describe("Emoji Search Test",()=>{
    let  headerRender,emojiLists,emojiInput,copyEmoji;
   
    beforeEach(()=>{
        render(<App/>)
        headerRender =screen.getByText("Emoji Search")
    // emojiListten ilk 20 kayÄ±t alÄ±nÄ±r:
        emojiLists = emojiList.slice(0, 20)
        //label verilerek getByLabelText() ile de yapÄ±labilirdi.
        //Inputa data-testid verilerek iÃ§eriÄŸi okunur
        emojiInput=screen.getByTestId("searchInput")
       
    })

    test('Header baÅŸarÄ±lÄ± bir ÅŸekilde render edilmeli ', () => {
        expect(headerRender).toBeInTheDocument()
    });

    test('Emoji listesi  baÅŸarÄ±lÄ± bir ÅŸekilde render edilmeli',() =>{
   // tek tek dokÃ¼man'da var mÄ± kontrol edilir:
   emojiLists.map((emoji)=>{
    expect(screen.getByText(emoji.title)).toBeInTheDocument()
    })
   });


   test('Emoji listesi filtreye uygun ÅŸekilde yeniden render edilmeli', () => {
      // herhangi bir emoji tanÄ±mlanÄ±r ve inputa yollanÄ±r:
        const emoji="Joy"
        //Inputa tanÄ±mladÄ±ÄŸÄ±mÄ±z emojiyi ekliyoruz:
        userEvent.type(emojiInput,emoji)
        //Inputa deÄŸer girildiÄŸinde click etmeye gerek kalmadan 
        // filtreleme yaptÄ±ÄŸÄ±ndan direkt dÃ¶kÃ¼manda tanÄ±mladÄ±ÄŸÄ±mÄ±z emoji var mÄ± onu kontrol ediyoruz:
       // userEvent.click(emojiInput);
        expect(screen.getByText(emoji)).toBeInTheDocument();
    });


    test('Herhangi emojiye tÄ±klandÄ±ÄŸÄ±nda ilgili emoji kopyalanmalÄ±dÄ±r', () => {
        copyEmoji = screen.getByText("Grinning")
        userEvent.click(copyEmoji)
        expect(copyEmoji.parentElement.getAttribute("data-clipboard-text")).toMatch("ðŸ˜€")
     });


  

    
})